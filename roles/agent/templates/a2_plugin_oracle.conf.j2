### Option: Plugins.Oracle.CallTimeout
#	The maximum time in seconds for waiting when a request has to be done.
#
# Mandatory: no
# Range: 1-30
# Default:
# Plugins.Oracle.CallTimeout=<Global timeout>
{% if agent_param_plugins_oracle_calltimeout  is defined and agent_param_plugins_oracle_calltimeout %}

Plugins.Oracle.CallTimeout={{ agent_param_plugins_oracle_calltimeout }}
{% endif %}

### Option: Plugins.Oracle.ConnectTimeout
#	The maximum time in seconds for waiting when a connection has to be established.
#
# Mandatory: no
# Range: 1-30
# Default:
# Plugins.Oracle.ConnectTimeout=<Global timeout>
{% if agent_param_plugins_oracle_connecttimeout  is defined and agent_param_plugins_oracle_connecttimeout %}

Plugins.Oracle.ConnectTimeout={{ agent_param_plugins_oracle_connecttimeout }}
{% endif %}

### Option: Plugins.Oracle.CustomQueriesPath
#	Full pathname of a directory containing *.sql* files with custom queries.
#
# Mandatory: no
# Default:
# Plugins.Oracle.CustomQueriesPath=
{% if agent_param_plugins_oracle_customqueriespath  is defined and agent_param_plugins_oracle_customqueriespath %}

Plugins.Oracle.CustomQueriesPath={{ agent_param_plugins_oracle_customqueriespath }}
{% endif %}

### Option: Plugins.Oracle.KeepAlive
#	Time in seconds for waiting before unused connections will be closed.
#
# Mandatory: no
# Range: 60-900
# Default:
# Plugins.Oracle.KeepAlive=300
{% if agent_param_plugins_oracle_keepalive  is defined and agent_param_plugins_oracle_keepalive %}

Plugins.Oracle.KeepAlive={{ agent_param_plugins_oracle_keepalive }}
{% endif %}

### Option: Plugins.Oracle.Sessions.*.Uri
#	Uri to connect. "*" should be replaced with a session name.
#
# Mandatory: no
# Range:
#   Must matches the URI format.
#   The only supported schema is "tcp".
#   Embedded credentials will be ignored.
# Default:
# Plugins.Oracle.Sessions.*.Uri=
{% if agent_param_plugins_oracle_sessions is defined and agent_param_plugins_oracle_sessions is iterable and agent_param_plugins_oracle_sessions is not string and agent_param_plugins_oracle_sessions is not mapping %}

{% for session in agent_param_plugins_oracle_sessions %}
{% if session["uri"] is defined and session["uri"] %}
Plugins.Oracle.Sessions.{{ session["name"] }}.Uri={{ session["uri"] }}
{% endif %}
{% endfor %}
{% endif %}

### Option: Plugins.Oracle.Sessions.*.Service
#	Service name to be used for connection. "*" should be replaced with a session name.
#
# Mandatory: no
# Range: SID is not supported.
# Default:
# Plugins.Oracle.Sessions.*.Service=
{% if agent_param_plugins_oracle_sessions is defined and agent_param_plugins_oracle_sessions is iterable and agent_param_plugins_oracle_sessions is not string and agent_param_plugins_oracle_sessions is not mapping %}

{% for session in agent_param_plugins_oracle_sessions %}
{% if session["service"] is defined and session["service"] %}
Plugins.Oracle.Sessions.{{ session["name"] }}.Service={{ session["service"] }}
{% endif %}
{% endfor %}
{% endif %}

### Option: Plugins.Oracle.Sessions.*.User
#	Username to be used for connection. "*" should be replaced with a session name.
#
# Mandatory: no
# Default:
# Plugins.Oracle.Sessions.*.User=
{% if agent_param_plugins_oracle_sessions is defined and agent_param_plugins_oracle_sessions is iterable and agent_param_plugins_oracle_sessions is not string and agent_param_plugins_oracle_sessions is not mapping %}

{% for session in agent_param_plugins_oracle_sessions %}
{% if session["user"] is defined and session["user"] %}
Plugins.Oracle.Sessions.{{ session["name"] }}.User={{ session["user"] }}
{% endif %}
{% endfor %}
{% endif %}

### Option: Plugins.Oracle.Sessions.*.Password
#	Password to be used for connectione. "*" should be replaced with a session name.
#
# Mandatory: no
# Default:
# Plugins.Oracle.Sessions.*.Password=
{% if agent_param_plugins_oracle_sessions is defined and agent_param_plugins_oracle_sessions is iterable and agent_param_plugins_oracle_sessions is not string and agent_param_plugins_oracle_sessions is not mapping %}

{% for session in agent_param_plugins_oracle_sessions %}
{% if session["password"] is defined and session["password"] %}
Plugins.Oracle.Sessions.{{ session["name"] }}.Password={{ session["password"] }}
{% endif %}
{% endfor %}
{% endif %}